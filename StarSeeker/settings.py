"""
Django settings for duniyadekhegi project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "ds-ymf^h+6s4pf4wfu26a00j79egei1z_kykazhkgkm1ua@ubv"

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.environ.get("DEBUG")
DEBUG = True
# ALLOWED_HOSTS = '*'
ALLOWED_HOSTS = [
    "0.0.0.0",
    "localhost",
    "127.0.0.1",
]

# Email SMTP Backend
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_PORT = 587

TEMPLATED_EMAIL_AUTO_PLAIN = False

# session
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_EXPIRE_SECONDS = 28800  # 8 hour
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
SESSION_EXPIRE_AFTER_LAST_ACTIVITY_GRACE_PERIOD = 90  # group by minute
SESSION_TIMEOUT_REDIRECT = "/"  # home

# Path
ROOT_PATH = os.path.abspath(os.path.dirname(__name__))
PROFILE_PICTURE_PATH = "media/generalprofile/img/"
TALENT_PROFILE_CONTENT_IMG_PATH = "media/talentprofile/img/content/"
TALENT_PROFILE_CONTENT_VIDEO_PATH = "media/talentprofile/video/"
USER_STORE_IMG_PATH = "media/store/img/"
USER_STORE_VID_PATH = "media/store/video/"
USER_STORE_LOGO_PATH = "media/store/logo/"
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "booking",
    "user",
    "store",
    "payment",
    "ckeditor",
    "rest_framework",
    "livereload",
    "common",
    "multiselectfield",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # Social Login Provider
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    # socail share
    # socail share
    "whitenoise.runserver_nostatic",
    "storages",
    "django_social_share",
    "django_cleanup.apps.CleanupConfig",
    "pwa",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "livereload.middleware.LiveReloadScript",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = "duniyadekhegi.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

AUTH_USER_MODEL = "user.GeneralUser"

WSGI_APPLICATION = "duniyadekhegi.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "duniyadekhegi_db",
        "USER": "dd_user",
        "PASSWORD": "DuniyaDekhegi@321",
        "HOST": "127.0.0.1",
    }
}
db_from_env = dj_database_url.config(conn_max_age=600)
DATABASES["default"].update(db_from_env)

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kolkata"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [os.path.join(BASE_DIR, "duniyadekhegi/static")]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/"

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# TO SET DEFAULT SITE URL IN MAIL ETC
SITE_ID = 2
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_VERIFICATION = os.environ.get("ACCOUNT_EMAIL_VERIFICATION")
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = "/accounts/login/"
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = "/accounts/login/"
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED

LOGIN_REDIRECT_URL = "/user/onboarding/"
SOCIAL_AUTH_REDIRECT_IS_HTTPS = True
ACCOUNT_ADAPTER = "user.adapters.AccountAdapter"
SOCIALACCOUNT_ADAPTER = "user.adapters.SocialAccountAdapter"

ACCOUNT_FORMS = {"login": "user.forms.MyLoginForm",
                 "signup": "user.forms.MySignupForm"}

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    },
    "facebook": {
        "SCOPE": ["email", "public_profile"],
        "FIELDS": [
            "id",
            "name",
            "email",
            "picture",
        ],
        "VERIFIED_EMAIL": False,
    },
}


CELERY_BROKER_URL = os.environ.get("REDIS_URL")
CELERY_ACCEPT_CONTENT = ["pickle"]
CELERY_TASK_SERIALIZER = "pickle"

ACCOUNT_EMAIL_SUBJECT_PREFIX = "[duniyadekhegi.com]"

USE_S3 = os.getenv("USE_S3") == "TRUE"
print("Settings USE_S3 = ", USE_S3)
if USE_S3:
    # S3 Specific Settings
    AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID", "None")
    AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_CUSTOM_DOMAIN = "%s.s3.amazonaws.com" % AWS_STORAGE_BUCKET_NAME
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }
    # TODO: CHANGE PATH
    S3DIRECT_DESTINATIONS = {
        "primary_destination": {
            "key": "duniyadekhegi/dd_media/",
            "allowed": ["image/jpg", "image/jpeg", "image/png", "video/mp4"],
        },
    }
    AWS_STATIC_LOCATION = "duniyadekhegi/dd_static"
    STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_STATIC_LOCATION)
    STATICFILES_STORAGE = "duniyadekhegi.storage_backends.StaticStorage"

    PUBLIC_MEDIA_LOCATION = "duniyadekhegi/dd_media"
    MEDIA_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN,
                                    PUBLIC_MEDIA_LOCATION)
    # Now, trying to use s3 for media files from duniyadekhegi/storage_backends.py
    DEFAULT_FILE_STORAGE = "duniyadekhegi.storage_backends.PublicMediaStorage"
    ADMIN_MEDIA_PREFIX = "https://partypakkis3bucket.s3.amazonaws.com/duniyadekhegi/dd_static/admin/"
else:
    # For local development
    STATIC_URL = "/static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
    MEDIA_URL = "/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "")

# FOR PWA
PWA_APP_NAME = "DuniyaDekhegi"
PWA_APP_DESCRIPTION = (
    "DuniyaDekhegi is a unique platform that empowers and connects all sorts of artists with the right set of audience."
)
PWA_APP_THEME_COLOR = "#ffffff"
PWA_APP_BACKGROUND_COLOR = "#ffffff"
PWA_APP_DISPLAY = "standalone"
PWA_APP_SCOPE = "/"
PWA_APP_ORIENTATION = "any"
PWA_APP_START_URL = "/"
PWA_APP_STATUS_BAR_COLOR = "default"
PWA_APP_ICONS = [
    {
        "src": "https://partypakkis3bucket.s3.amazonaws.com/duniyadekhegi/dd_static/favicon/my_app_icon.png",
        "sizes": "192x192",
    }
]
PWA_APP_ICONS_APPLE = [
    {
        "src": "https://partypakkis3bucket.s3.amazonaws.com/duniyadekhegi/dd_static/favicon/my_app_icon.png",
        "sizes": "192x192",
    }
]
# PWA_APP_SPLASH_SCREEN = [
#     {
#         'src': '/static/images/icons/splash-640x1136.png',
#         'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'
#     }
# ]
PWA_APP_DIR = "ltr"
PWA_APP_LANG = "en-US"
PWA_SERVICE_WORKER_PATH = os.path.join(BASE_DIR, "sw.js")


RAZORPAY_KEY_ID = "rzp_test_zBOMBlwfEXqsJo"
RAZORPAY_KEY_SECRET = "dk8mvmFTHagh0jBTh0mPng3H"
